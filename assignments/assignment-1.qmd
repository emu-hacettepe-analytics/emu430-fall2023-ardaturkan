---
title: "Assignment 1"
date: last-modified
author: 
  - name: Arda TÃ¼rkan
format:
  html:
    toc: true
    toc-depth: 3
    toc-location: right
    smooth-scroll: true
    anchor-sections: true
---

## Overview

This assignment consists of three parts.

1.  "Import Excel to R"

2.  Three differences between R and Python.

3.  Examining and handling "NA Values" on a sample data.

## "Import Excel to R"

I will give a brief summary of the video: [Import Data, Copy Data from Excel to R CSV & TXT Files](https://www.youtube.com/watch?v=qPk0YEKhqB8)

Mike Marin discusses how to import data from Excel into R. He outlines the steps for importing data from both CSV and tab-delimited text files. He demonstrates the use of the "read.csv," "read.table," and "read.delim" commands in R to import data, using the "file.choose" command to select the data file from a menu. He also highlights the importance of setting the "header" argument to TRUE when the first row of the data set contains variable names. The video covers both CSV and tab-delimited text file import methods.

## Three Differences Between R and Python.

Although there are many similarities between Python and R languages that are frequently used today, there are also very clear and fundamental differences. We can summarize these three fundamental differences as follows:

### Assignment Operator

While in Python, the assignment operator is a single equality sign "=", in R, the assignment operator can also be expressed as "\<-", and for the sake of code clarity and convention, the use of "\<-" is recommended by the community.

[*Python*]{.underline}

```{python}
due_date_assignment = "November 03, 2023" 
print(due_date_assignment)
```

[*R*]{.underline}

```{r}
due_date_assignment <- "November 03, 2023"
print(due_date_assignment)
```

### Indentation

Python indentation refers to adding white space before a statement to a particular block of code. In other words, the lines which belongs to same block of code must have a same indent. In R, there is no such obligation. However, indentation is recommended for ease of coding and reading.

[*Python*]{.underline}

```{python}
#| error: true
due_date_assignment = "November 03, 2023" 
  print(due_date_assignment)
```

[*R*]{.underline}

```{r}
due_date_assignment <- "November 03, 2023"
  print(due_date_assignment)
```

### Indexing

The one of the most crucial difference between syntaxes of R and Python is to reference a variable in an array by using its index number. While indexing in Python starts at 0, in R, the first element has an index of 1.

*Although there are different data types in both languages, this expression is valid for all data types in both languages.*

[*Python*]{.underline}

```{python}
numerical_digits_descending = [9,8,7,6,5,4,3,2,1,0]
print(numerical_digits_descending[0])
```

[*R*]{.underline}

```{r}
numerical_digits_descending <- c(9,8,7,6,5,4,3,2,1,0)
print(numerical_digits_descending[1])
```

## "NA Values" on a Sample Data.

### Import and Examine Data

First of all our data can be shown by:

```{r}
library(dslabs)
dslabs::na_example
```

To see the total number of "*NA"* values, we use the following code:

```{r}
sum(is.na(na_example))
```

### Handle Missing Values

We will replace the missing values by 0 and store the data in a new object :

```{r}
new_data_set <- replace(na_example, is.na(na_example), 0)
new_data_set
```

To check whether there is any "NA" values are left:

```{r}
sum(is.na(new_data_set))
```
